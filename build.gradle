def modVersion = "3.0.26-GTNH"

import java.util.concurrent.TimeUnit

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://gregtech.overminddl1.com/"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath "com.github.GTNH2:ForgeGradle:FG_1.2-SNAPSHOT"
    }
}

apply plugin: 'java'
apply plugin: 'forge' // Add forge dependency
apply plugin: 'idea'

idea {
    module {
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

version = "1.7-${modVersion}" // Set the version number
group = "micdoodle8.mods.galacticraft"
archivesBaseName = "Galacticraft"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10" // Forge version
    runDir = "run" // This is where forge will download Minecraft assets
    replace "@VERSION@", modVersion
    replaceIn "src/main/java/micdoodle8/mods/galacticraft/core/Constants.java"
}

configurations {
    all {
        resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS)
        setTransitive(false)
    }
    provided
    embedded
    compile.extendsFrom provided, embedded
}

repositories {
    maven {
        name "ChickenBones Maven"
        url "https://chickenbones.net/maven/"
    }
    maven {
        name "IC2 Maven"
        url "https://maven.ic2.player.to/"
    }
    ivy {
        name "BuildCraft"
        artifactPattern "https://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision](-[classifier]).[ext]"
    }
    maven {
        name "CurseForge Maven"
        url "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name "GitHub"
        url "https://jitpack.io"
    }
}

dependencies {
    compile "biomes-o-plenty:BiomesOPlenty-1.7.10:2.1.0.2308:universal"
    compile "com.mod-buildcraft:buildcraft:7.1.23:api"
    compile "codechicken:CodeChickenCore:1.7.10-1.0.7.46:dev"
    compile "codechicken:CodeChickenLib:1.7.10-1.1.3.138:dev"
    compile("com.github.GTNewHorizons:GT5-Unofficial:experimental-SNAPSHOT:dev") { setChanging(true) }
    compile "net.industrial-craft:industrialcraft-2:2.2.790-experimental:dev"
    compile "cpw.mods:ironchest:1.7.10-6.0.62.742:deobf"
    compile("com.github.GTNewHorizons:MicdoodleCore:1.7-SNAPSHOT:dev") { setChanging(true) }
    compile("com.github.GTNewHorizons:NotEnoughItems:master-SNAPSHOT:dev") { setChanging(true) }
    compile "player-api:PlayerAPI:1.7.10:1.4"
    compile "render-player-api:RenderPlayerAPI:1.7.10:1.4"
    compile "smart-render:SmartRender:1.7.10:2.1"
    compile("com.github.GTNewHorizons:TinkersConstruct:master-SNAPSHOT:deobf") { setChanging(true) }
    compile("com.github.GTNewHorizons:Applied-Energistics-2-Unofficial:rv3-1.7.10-SNAPSHOT:dev") {
        exclude module: '*'
        setChanging(true)
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", modVersion
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':modVersion, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    exclude '**/Thumbs.db'
}


// Planets addon files/directories
def planetsFiles = ['micdoodle8/mods/galacticraft/planets/**',
                    'assets/galacticraftmars/**',
                    'assets/galacticraftasteroids/**']

jar {
    classifier = 'full'
}

task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
    //exclude planetsFiles
}

task apiJar(type: Jar) {
    from sourceSets.main.allSource
    // Jar will always be updated
    outputs.upToDateWhen {false}
    // Set the jar's base name
    baseName = "Galacticraft"
    classifier = 'api'

    include(['micdoodle8/mods/galacticraft/api/**'])
}
tasks.jar.dependsOn('devJar', 'apiJar')

// Tell the artifact system about our extra jars
artifacts {
    jar
    devJar
    apiJar
}
